// Programa de prueba de la clase ModbusServe

#define TITULO "ModbusRTU: error fuera de rango"

#include <iostream>
#include <iomanip>
#include <vector>

#include "Mensaje.hpp"
#include "ModbusRTU.hpp"

int pruebas = 0;
int fallos = 0;

#define ID_DEV  6


void testea(ModbusRTU &mbs, std::string titulo, Mensaje peticion,
    Mensaje respuestaOK) {

  pruebas++;

  std::cout << "\n\nTest '" << titulo << "' enviamos " << peticion.toString() << "\n";

  Mensaje respuesta = mbs.peticion(peticion);

  if(respuesta.toString() == respuestaOK.toString()) {
    std::cout << "CORRECTO: la respuesta fue " << respuesta.toString() << std::endl;
  } else {
    std::cout << "FALLO "  << ++fallos << ": la respuesta debería ser "
        << respuestaOK.toString() << " pero es " << respuesta.toString() << std::endl;
  }
}

int main (int argc, char *argv[]) {

  std::cout << "\n***  " << TITULO << "  ***\n" << std::endl;


  ModbusRTU mbs(ID_DEV);

  {
    Mensaje peti({ 0x06, 0x03, 0x00, 0x0A, 0x00, 0x01, 0xA5, 0xBF });
    Mensaje resp({ 0x06, 0x83, 0x02, 0x71, 0x30 });
    testea(mbs, "Error, lectura analogica en 11", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x03, 0x00, 0x09, 0x00, 0x06, 0x14, 0x7D });
    Mensaje resp({ 0x06, 0x83, 0x02, 0x71, 0x30 });
    testea(mbs, "Error, lectura analogica de 10 a 15", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x03, 0x00, 0x00, 0x00, 0x0B, 0x05, 0xBA });
    Mensaje resp({ 0x06, 0x83, 0x02, 0x71, 0x30 });
    testea(mbs, "Error, lectura analogica de 1 a 11", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x01, 0x00, 0x14, 0x00, 0x01, 0xBC, 0x79 });
    Mensaje resp({ 0x06, 0x81, 0x02, 0x70, 0x50 });
    testea(mbs, "Error, Leemos las salida digital 21", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x01, 0x00, 0x00, 0x00, 0x15, 0xFC, 0x72 });
    Mensaje resp({ 0x06, 0x81, 0x02, 0x70, 0x50 });
    testea(mbs, "Error, Leemos las salida digital de 1 a 21", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x01, 0x00, 0x0E, 0x00, 0x0B, 0x1D, 0xB9 });
    Mensaje resp({ 0x06, 0x81, 0x02, 0x70, 0x50 });
    testea(mbs, "Error, Leemos las salida digital de 15 a 25", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x05, 0x00, 0x14, 0xFF, 0x00, 0xCD, 0x89 });
    Mensaje resp({ 0x06, 0x85, 0x02, 0x72, 0x90 });
    testea(mbs, "Error, escritura digital única en 21", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x05, 0x00, 0x31, 0xFF, 0x00, 0xDC, 0x42 });
    Mensaje resp({ 0x06, 0x85, 0x02, 0x72, 0x90 });
    testea(mbs, "Error, escritura digital única en 50", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x0F, 0x00, 0x14, 0x00, 0x01, 0x01, 0x01, 0x9E, 0xB2 });
    Mensaje resp({ 0x06, 0x8F, 0x02, 0x74, 0x30 });
    testea(mbs, "Error, escritura digital multiple en 21", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x0F, 0x00, 0x00, 0x00, 0x15, 0x03, 0x00, 0x00, 0x00, 0xDC, 0x6F });
    Mensaje resp({ 0x06, 0x8F, 0x02, 0x74, 0x30 });
    testea(mbs, "Error, escritura digital multiple de 1 a 21", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x0F, 0x00, 0x09, 0x00, 0x10, 0x02, 0x00, 0x00, 0xC4, 0x89 });
    Mensaje resp({ 0x06, 0x8F, 0x02, 0x74, 0x30 });
    testea(mbs, "Error, escritura digital multiple de 10 a 25", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x06, 0x00, 0x0A, 0x00, 0x01, 0x69, 0xBF });
    Mensaje resp({ 0x06, 0x86, 0x02, 0x72, 0x60 });
    testea(mbs, "Error, estritura analogica única en 11", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x06, 0x00, 0x1D, 0x00, 0x01, 0xD9, 0xBB });
    Mensaje resp({ 0x06, 0x86, 0x02, 0x72, 0x60 });
    testea(mbs, "Error, estritura analogica única en 30", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x10, 0x00, 0x0A, 0x00, 0x01, 0x02, 0x00, 0x01, 0x41, 0x0A });
    Mensaje resp({ 0x06, 0x90, 0x02, 0x7C, 0x00 });
    testea(mbs, "Error, escritura analogica múltiple en 11", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x10, 0x00, 0x00, 0x00, 0x0B, 0x16, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0xBD, 0x8A });
    Mensaje resp({ 0x06, 0x90, 0x02, 0x7C, 0x00 });
    testea(mbs, "Error, escritura analogica múltiple de 1 a 11", peti, resp);
  }
  {
    Mensaje peti({ 0x06, 0x10, 0x00, 0x04, 0x00, 0x10, 0x20, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0xB7, 0xAE });
    Mensaje resp({ 0x06, 0x90, 0x02, 0x7C, 0x00 });
    testea(mbs, "Error, escritura analogica múltiple de 5 a 20", peti, resp);
  }


  // Resumen final
  if (fallos == 0)
    std::cout << "\n :-) Todas las " << pruebas << " pruebas correctas\n"
        << std::endl;
  else
    std::cout << "\n :-( Se han producido " << fallos << " FALLOs de "
        << pruebas << " pruebas (" << std::fixed <<  std::setprecision(0)
        << fallos*100.0/pruebas << "%)\n"
        << std::endl;
  return fallos;
}
